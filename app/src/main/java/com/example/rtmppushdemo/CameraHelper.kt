package com.example.rtmppushdemo

import android.annotation.SuppressLint
import android.annotation.TargetApi
import android.app.Activity
import android.content.Context
import android.content.res.Configuration
import android.graphics.*
import android.hardware.camera2.*
import android.media.ImageReader
import android.os.Build
import android.os.Handler
import android.os.HandlerThread
import android.util.Log
import android.util.Size
import android.view.Surface
import android.view.TextureView
import androidx.annotation.NonNull
import androidx.annotation.RequiresApi
import java.util.*
import java.util.concurrent.Semaphore


@TargetApi(Build.VERSION_CODES.LOLLIPOP)
class CameraHelper(context: Context, width: Int, height: Int, cameraId: Int) {
    private var isLive: Boolean = false
    private lateinit var onPreviewListener: OnPreviewListener
    //    var mwidth: Int
//    var mheight: Int
    private lateinit var onChangeListener: OnChangeListener
    /**
     * Max preview width that is guaranteed by Camera2 API
     */
    private var MAX_PREVIEW_WIDTH: Int

    /**
     * Max preview height that is guaranteed by Camera2 API
     */
    private var MAX_PREVIEW_HEIGHT: Int
    var cameraId: Int
    var mActivity: Activity
    private var mBackgroundThread: HandlerThread? = null
    /**
     * A [Handler] for running tasks in the background.
     */
    private var mBackgroundHandler: Handler? = null

    init {
        this.MAX_PREVIEW_WIDTH = width
        this.MAX_PREVIEW_HEIGHT = height
        this.cameraId = cameraId
        this.mActivity = context as Activity


        mBackgroundThread = HandlerThread("CameraBackground")
        mBackgroundThread!!.start()
        mBackgroundHandler = Handler(mBackgroundThread!!.getLooper())

    }

    /**
     * An additional thread for running tasks that shouldn't block the UI.
     */
    private val TAG = "Camera2BasicFragment"


    private lateinit var mTextureView: AutoFitTextureView

    private var mSensorOrientation: Int = 0


    /**
     * [CaptureRequest.Builder] for the camera preview
     */
    private var mPreviewRequestBuilder: CaptureRequest.Builder? = null

    /**
     * The [android.util.Size] of camera preview.
     */
    private lateinit var mPreviewSize: Size

    /**
     * An [ImageReader] that handles still image capture.
     */
    private var mImageReader: ImageReader? = null
    /**
     * A reference to the opened [CameraDevice].
     */
    private var mCameraDevice: CameraDevice? = null
    /**
     * A [Semaphore] to prevent the app from exiting before closing the camera.
     */
    private val mCameraOpenCloseLock = Semaphore(1)
    /**
     * [TextureView.SurfaceTextureListener] handles several lifecycle events on a
     * [TextureView].
     */


    /**
     * [CaptureRequest] generated by [.mPreviewRequestBuilder]
     */
    private var mPreviewRequest: CaptureRequest? = null

    /**
     * A [CameraCaptureSession] for camera preview.
     */
    private var mCaptureSession: CameraCaptureSession? = null
    private val mSurfaceTextureListener = object : TextureView.SurfaceTextureListener {

        override fun onSurfaceTextureAvailable(texture: SurfaceTexture, width: Int, height: Int) {
            openCamera(width, height)
        }

        override fun onSurfaceTextureSizeChanged(texture: SurfaceTexture, width: Int, height: Int) {
            configureTransform(width, height)
        }

        override fun onSurfaceTextureDestroyed(texture: SurfaceTexture): Boolean {
            closeCamera()
            return true
        }

        override fun onSurfaceTextureUpdated(texture: SurfaceTexture) {
        }

    }


    fun setTextureView(texture: AutoFitTextureView) {
        this.mTextureView = texture
        if (mTextureView.isAvailable) {
            openCamera(mTextureView.width, mTextureView.height)
        } else {
            mTextureView.surfaceTextureListener = mSurfaceTextureListener
        }
    }

    /**
     * Opens the camera specified by [Camera2BasicFragment.mCameraId].
     */
    @TargetApi(Build.VERSION_CODES.P)
    @SuppressLint("MissingPermission", "NewApi")
    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
    private fun openCamera(width: Int, height: Int) {

        //设置预览图像的大小，surfaceview的大小。
        setUpCameraOutputs(width, height)
//        configureTransform(width, height)
        val manager = mActivity.getSystemService(Context.CAMERA_SERVICE) as CameraManager

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            manager.openCamera(cameraId.toString(), mStateCallback, null)
        }


    }


    /**
     * Sets up member variables related to camera.
     *
     * @param width  The width of available size for camera preview
     * @param height The height of available size for camera preview
     */

    private fun setUpCameraOutputs(width: Int, height: Int) {
        val manager = mActivity.getSystemService(Context.CAMERA_SERVICE) as CameraManager
        try {
            val characteristics = manager.getCameraCharacteristics(cameraId.toString())

            // We don't use a front facing camera in this sample.
            val facing = characteristics.get(CameraCharacteristics.LENS_FACING)

            val map = characteristics.get(
                CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP
            )

            // For still image captures, we use the largest available size.
            val largest = Collections.max(
                Arrays.asList(*map!!.getOutputSizes(ImageFormat.YUV_420_888)),
                CompareSizesByArea()
            )


            // Find out if we need to swap dimension to get the preview size relative to sensor
            // coordinate.
            val displayRotation = mActivity.getWindowManager().getDefaultDisplay().getRotation()

            mSensorOrientation = characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION)!!
            var swappedDimensions = false
            when (displayRotation) {
                Surface.ROTATION_0, Surface.ROTATION_180 -> if (mSensorOrientation == 90 || mSensorOrientation == 270) {
                    swappedDimensions = true
                }
                Surface.ROTATION_90, Surface.ROTATION_270 -> if (mSensorOrientation == 0 || mSensorOrientation == 180) {
                    swappedDimensions = true
                }
                else -> Log.e(TAG, "Display rotation is invalid: $displayRotation")
            }

            val displaySize = Point()
            mActivity.getWindowManager().getDefaultDisplay().getSize(displaySize)
            var rotatedPreviewWidth = width
            var rotatedPreviewHeight = height
            var maxPreviewWidth = displaySize.x
            var maxPreviewHeight = displaySize.y

            if (swappedDimensions) {
                rotatedPreviewWidth = height
                rotatedPreviewHeight = width
                maxPreviewWidth = displaySize.y
                maxPreviewHeight = displaySize.x
            }

            if (maxPreviewWidth > MAX_PREVIEW_WIDTH) {
                maxPreviewWidth = MAX_PREVIEW_WIDTH
            }

            if (maxPreviewHeight > MAX_PREVIEW_HEIGHT) {
                maxPreviewHeight = MAX_PREVIEW_HEIGHT
            }

            // Danger, W.R.! Attempting to use too large a preview size could  exceed the camera
            // bus' bandwidth limitation, resulting in gorgeous previews but the storage of
            // garbage capture data.
            mPreviewSize = chooseOptimalSize(
                map.getOutputSizes(SurfaceTexture::class.java),
                rotatedPreviewWidth, rotatedPreviewHeight, maxPreviewWidth,
                maxPreviewHeight, largest
            )


            mImageReader = ImageReader.newInstance(
                mPreviewSize.width, mPreviewSize.height,
                ImageFormat.YUV_420_888, /*maxImages*/2
            )
            mImageReader!!.setOnImageAvailableListener(
                mOnImageAvailableListener, mBackgroundHandler
            )

            // We fit the aspect ratio of TextureView to the size of preview we picked.
            val orientation = mActivity.getResources().getConfiguration().orientation
            if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                mTextureView.setAspectRatio(
                    mPreviewSize.getWidth(), mPreviewSize.getHeight()
                )
            } else {

                mTextureView.setAspectRatio(
                    mPreviewSize.getHeight(), mPreviewSize.getWidth()
                )
            }

            // Check if the flash is supported.
            val available = characteristics.get(CameraCharacteristics.FLASH_INFO_AVAILABLE)

        } catch (e: CameraAccessException) {
            e.printStackTrace()
        } catch (e: NullPointerException) {
            // Currently an NPE is thrown when the Camera2API is used but not supported on the
            // device this code runs.
        }

    }


    /**
     * Configures the necessary [android.graphics.Matrix] transformation to `mTextureView`.
     * This method should be called after the camera preview size is determined in
     * setUpCameraOutputs and also the size of `mTextureView` is fixed.
     *
     * @param viewWidth  The width of `mTextureView`
     * @param viewHeight The height of `mTextureView`
     */
    private fun configureTransform(viewWidth: Int, viewHeight: Int) {
        if (null == mTextureView || null == mPreviewSize || null == mActivity) {
            return
        }
        val rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation()
        val matrix = Matrix()
        val viewRect = RectF(0f, 0f, viewWidth.toFloat(), viewHeight.toFloat())
        val bufferRect = RectF(0f, 0f, mPreviewSize.height.toFloat(), mPreviewSize.width.toFloat())
        val centerX = viewRect.centerX()
        val centerY = viewRect.centerY()
        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY())
            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL)
            val scale = Math.max(
                viewHeight.toFloat() / mPreviewSize.height,
                viewWidth.toFloat() / mPreviewSize.width
            )
            matrix.postScale(scale, scale, centerX, centerY)
            matrix.postRotate((90 * (rotation - 2)).toFloat(), centerX, centerY)
            if (onChangeListener != null)
                onChangeListener.onSizeChange(mPreviewSize.height, mPreviewSize.width)
        } else if (Surface.ROTATION_180 == rotation) {
            matrix.postRotate(180f, centerX, centerY)
            if (onChangeListener != null)
                onChangeListener.onSizeChange(mPreviewSize.width, mPreviewSize.height)
        } else {
            if (onChangeListener != null)
                onChangeListener.onSizeChange(mPreviewSize.width, mPreviewSize.height)
        }

//        matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL)
        mTextureView.setTransform(matrix)
    }

    private fun chooseOptimalSize(
        choices: Array<Size>, textureViewWidth: Int,
        textureViewHeight: Int, maxWidth: Int, maxHeight: Int, aspectRatio: Size
    ): Size {

        var current: Size = Size(maxWidth, maxHeight);
        var dis: Int = Math.abs(choices.get(0).height * choices.get(0).width - maxHeight * maxWidth)

        for (option in choices) {
            var max: Int = Math.abs(option.height * option.width - maxHeight * maxWidth);
            if (max < dis) {
                dis = max
                current = option;
            }
        }

        return current;
    }

    /**
     * [CameraDevice.StateCallback] is called when [CameraDevice] changes its state.
     */
    private val mStateCallback = @RequiresApi(Build.VERSION_CODES.LOLLIPOP)
    object : CameraDevice.StateCallback() {

        override fun onOpened(@NonNull cameraDevice: CameraDevice) {
            // This method is called when the camera is opened.  We start camera preview here.
            mCameraOpenCloseLock.release()
            mCameraDevice = cameraDevice
            createCameraPreviewSession()
        }

        override fun onDisconnected(@NonNull cameraDevice: CameraDevice) {
            mCameraOpenCloseLock.release()
            cameraDevice.close()
            mCameraDevice = null
        }

        override fun onError(@NonNull cameraDevice: CameraDevice, error: Int) {
            mCameraOpenCloseLock.release()
            cameraDevice.close()
            mCameraDevice = null
            if (null != mActivity) {
                mActivity!!.finish()
            }
        }

    }


    /**
     * Creates a new [CameraCaptureSession] for camera preview.
     */
    private fun createCameraPreviewSession() {
        try {
            val texture = mTextureView.surfaceTexture!!

            // We configure the size of default buffer to be the size of camera preview we want.
            texture.setDefaultBufferSize(mPreviewSize.width, mPreviewSize.height)

            // This is the output Surface we need to start preview.
            val surface = Surface(texture)

            // We set up a CaptureRequest.Builder with the output Surface.
            mPreviewRequestBuilder =
                mCameraDevice!!.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW)
            mPreviewRequestBuilder!!.addTarget(surface)
            mPreviewRequestBuilder!!.addTarget(mImageReader!!.getSurface())

            // Here, we create a CameraCaptureSession for camera preview.
            mCameraDevice!!.createCaptureSession(
                Arrays.asList(surface, mImageReader!!.getSurface()),
                object : CameraCaptureSession.StateCallback() {

                    override fun onConfigured(@NonNull cameraCaptureSession: CameraCaptureSession) {
                        // The camera is already closed
                        if (null == mCameraDevice) {
                            return
                        }

                        // When the session is ready, we start displaying the preview.
                        mCaptureSession = cameraCaptureSession
                        try {
                            // Auto focus should be continuous for camera preview.
                            mPreviewRequestBuilder!!.set(
                                CaptureRequest.CONTROL_AF_MODE,
                                CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE
                            )
                            // Flash is automatically enabled when necessary.

                            // Finally, we start displaying the camera preview.
                            mPreviewRequest = mPreviewRequestBuilder!!.build()
                            mCaptureSession!!.setRepeatingRequest(
                                mPreviewRequest!!,
                                mCaptureCallback, mBackgroundHandler
                            )
                        } catch (e: CameraAccessException) {
                            e.printStackTrace()
                        }

                    }

                    override fun onConfigureFailed(
                        @NonNull cameraCaptureSession: CameraCaptureSession
                    ) {
                    }
                }, null
            )
        } catch (e: CameraAccessException) {
            e.printStackTrace()
        }

    }

    /**
     * Closes the current [CameraDevice].
     */
    fun closeCamera() {
        try {
            mCameraOpenCloseLock.acquire()
            if (null != mCaptureSession) {
                mCaptureSession!!.close()
                mCaptureSession = null
            }
            if (null != mCameraDevice) {
                mCameraDevice!!.close()
                mCameraDevice = null
            }
            if (null != mImageReader) {
                mImageReader!!.close()
                mImageReader = null
            }
        } catch (e: InterruptedException) {
            throw RuntimeException("Interrupted while trying to lock camera closing.", e)
        } finally {
            mCameraOpenCloseLock.release()
        }
    }


    /**
     * Stops the background thread and its [Handler].
     */
    private fun stopBackgroundThread() {
        mBackgroundThread?.quitSafely()
        try {
            mBackgroundThread?.join()
            mBackgroundThread = null
            mBackgroundHandler = null
        } catch (e: InterruptedException) {
            e.printStackTrace()
        }

    }

    fun setChangeSizeListener(onChangeListener: OnChangeListener) {
        this.onChangeListener = onChangeListener;
    }

    fun setOnPreViewFrame(onPreviewListener: OnPreviewListener) {
        this.onPreviewListener = onPreviewListener;
    }

    fun startLive() {
        isLive = true;
    }

    fun stopLive() {
        isLive = true;
    }


    /**
     * A [CameraCaptureSession.CaptureCallback] that handles events related to JPEG capture.
     */
    private val mCaptureCallback = object : CameraCaptureSession.CaptureCallback() {

        private fun process(result: CaptureResult) {

        }

        override fun onCaptureProgressed(
            @NonNull session: CameraCaptureSession,
            @NonNull request: CaptureRequest,
            @NonNull partialResult: CaptureResult
        ) {
            process(partialResult)
        }

        override fun onCaptureCompleted(
            @NonNull session: CameraCaptureSession,
            @NonNull request: CaptureRequest,
            @NonNull result: TotalCaptureResult
        ) {
            process(result)
        }

    }

    /**
     * This a callback object for the [ImageReader]. "onImageAvailable" will be called when a
     * still image is ready to be saved.
     */
    private val mOnImageAvailableListener =
        ImageReader.OnImageAvailableListener { reader ->

            val image = reader.acquireLatestImage()
            if (image == null) {
                return@OnImageAvailableListener
            }
            if (!isLive) {
                image.close()
                return@OnImageAvailableListener
            }
            val planes = image!!.planes

            val width = image.width
            val height = image.height

            // Y、U、V数据
            val yBytes = ByteArray(width * height)
            val uBytes = ByteArray(width * height / 4)
            val vBytes = ByteArray(width * height / 4)
            val i420 = ByteArray(width * height * 3 / 2)
            //目标数组的装填到的位置
            var dstIndex = 0
            var uIndex = 0
            var vIndex = 0

            var pixelsStride: Int
            var rowStride: Int
            for (i in planes.indices) {
                pixelsStride = planes[i].pixelStride
                rowStride = planes[i].rowStride

                val buffer = planes[i].buffer

                //如果pixelsStride==2，一般的Y的buffer长度=640*480，UV的长度=640*480/2-1
                //源数据的索引，y的数据是byte中连续的，u的数据是v向左移以为生成的，两者都是偶数位为有效数据
                val bytes = ByteArray(buffer.capacity())
                buffer.get(bytes)

                var srcIndex = 0
                if (i == 0) {
                    //直接取出来所有Y的有效区域，也可以存储成一个临时的bytes，到下一步再copy
                    for (j in 0 until height) {
                        System.arraycopy(bytes, srcIndex, yBytes, dstIndex, width)
                        srcIndex += rowStride
                        dstIndex += width
                    }
                } else if (i == 1) {
                    //根据pixelsStride取相应的数据
                    for (j in 0 until height / 2) {
                        for (k in 0 until width / 2) {
                            uBytes[uIndex++] = bytes[srcIndex]
                            srcIndex += pixelsStride
                        }
                        if (pixelsStride == 2) {
                            srcIndex += rowStride - width
                        } else if (pixelsStride == 1) {
                            srcIndex += rowStride - width / 2
                        }
                    }
                } else if (i == 2) {
                    //根据pixelsStride取相应的数据
                    for (j in 0 until height / 2) {
                        for (k in 0 until width / 2) {
                            vBytes[vIndex++] = bytes[srcIndex]
                            srcIndex += pixelsStride
                        }
                        if (pixelsStride == 2) {
                            srcIndex += rowStride - width
                        } else if (pixelsStride == 1) {
                            srcIndex += rowStride - width / 2
                        }
                    }
                }
            }
            System.arraycopy(yBytes, 0, i420, 0, yBytes.size)
            System.arraycopy(uBytes, 0, i420, yBytes.size, uBytes.size)
            System.arraycopy(vBytes, 0, i420, yBytes.size + uBytes.size, vBytes.size)

            if (onPreviewListener != null) {
                onPreviewListener.onPreviewFrame(i420, i420.size)
            }
            image.close()


        }

    /**
     * Compares two `Size`s based on their areas.
     */
    internal class CompareSizesByArea : Comparator<Size> {

        override fun compare(lhs: Size, rhs: Size): Int {
            // We cast here to ensure the multiplications won't overflow
            return java.lang.Long.signum(lhs.width.toLong() * lhs.height - rhs.width.toLong() * rhs.height)
        }

    }
}